name: CI Pipeline

on:
  push:
    branches:
      - development

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CI: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Build identity_service
        run: |
          cd identity_service
          dotnet restore "identity_service.sln"
          dotnet build
      
      - name: Build profile_service
        run: |
          cd profile_service
          dotnet restore "profile_service.sln"
          dotnet build 
          
      - name: Build tweet_service
        run: |
          cd Tweet_service
          dotnet restore "Tweet_service.sln"
          dotnet build 

      - name: Build api_gateway
        run: |
          cd api_gateway
          dotnet restore "api_gateway.sln"
          dotnet build 
            
          
      - name: Build frontend
        run: |
            cd frontend
            npm install
            npm run build --if-present

  integration-test:
    runs-on: self-hosted
    env:
      CI: false
    steps:
      - uses: actions/checkout@v3
      - name: run docker compose
        run: docker compose up --build -d
      - name: Install Postman CLI
        run: |
          powershell.exe -NoProfile -InputFormat None -ExecutionPolicy AllSigned -Command "[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://dl-cli.pstmn.io/install/win64.ps1'))"
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests
        run: |
          postman collection run "29677479-eea9d3ae-6477-43ff-8e3a-80468d64e034"


  analysis:
   needs: integration-test
   runs-on: self-hosted
   steps:
      - name: Analysis identity_service
        run: |
          cd identity_service
          dotnet sonarscanner begin /k:"identity_service" /d:sonar.host.url=${{  secrets.SONAR_HOST }}  /d:sonar.login=${{ secrets.SONAR_IDENTITY_SERVICE_TOKEN }}
          dotnet build
          dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_IDENTITY_SERVICE_TOKEN }}

      - name: Analysis profile_service
        run: |
          cd profile_service
          dotnet sonarscanner begin /k:"profile_service" /d:sonar.host.url="${{ secrets.SONAR_HOST }}"  /d:sonar.login="${{ secrets.SONAR_PROFILE_SERVICE_TOKEN }}"
          dotnet build
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_PROFILE_SERVICE_TOKEN }}"

      - name: Analysis tweet_service
        run: |
          cd Tweet_service
          dotnet sonarscanner begin /k:"tweet_service" /d:sonar.host.url="${{ secrets.SONAR_HOST }}"  /d:sonar.login="${{ secrets.SONAR_TWEET_SERVICE_TOKEN }}"
          dotnet build
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TWEET_SERVICE_TOKEN }}"
